require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# RSpec.describe '/transcript_configs', type: :request do
#   # TranscriptConfig. As you add validations to TranscriptConfig, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) do
#     skip('Add a hash of attributes valid for your model')
#   end
#
#   let(:invalid_attributes) do
#     skip('Add a hash of attributes invalid for your model')
#   end
#
#   describe 'GET /index' do
#     it 'renders a successful response' do
#       TranscriptConfig.create! valid_attributes
#       get transcript_configs_url
#       expect(response).to be_successful
#     end
#   end
#
#   describe 'GET /show' do
#     it 'renders a successful response' do
#       transcript_config = TranscriptConfig.create! valid_attributes
#       get transcript_config_url(transcript_config)
#       expect(response).to be_successful
#     end
#   end
#
#   describe 'GET /new' do
#     it 'renders a successful response' do
#       get new_transcript_config_url
#       expect(response).to be_successful
#     end
#   end
#
#   describe 'GET /edit' do
#     it 'render a successful response' do
#       transcript_config = TranscriptConfig.create! valid_attributes
#       get edit_transcript_config_url(transcript_config)
#       expect(response).to be_successful
#     end
#   end
#
#   describe 'POST /create' do
#     context 'with valid parameters' do
#       it 'creates a new TranscriptConfig' do
#         expect do
#           post transcript_configs_url, params: { transcript_config: valid_attributes }
#         end.to change(TranscriptConfig, :count).by(1)
#       end
#
#       it 'redirects to the created transcript_config' do
#         post transcript_configs_url, params: { transcript_config: valid_attributes }
#         expect(response).to redirect_to(transcript_config_url(TranscriptConfig.last))
#       end
#     end
#
#     context 'with invalid parameters' do
#       it 'does not create a new TranscriptConfig' do
#         expect do
#           post transcript_configs_url, params: { transcript_config: invalid_attributes }
#         end.to change(TranscriptConfig, :count).by(0)
#       end
#
#       it "renders a successful response (i.e. to display the 'new' template)" do
#         post transcript_configs_url, params: { transcript_config: invalid_attributes }
#         expect(response).to be_successful
#       end
#     end
#   end
#
#   describe 'PATCH /update' do
#     context 'with valid parameters' do
#       let(:new_attributes) do
#         skip('Add a hash of attributes valid for your model')
#       end
#
#       it 'updates the requested transcript_config' do
#         transcript_config = TranscriptConfig.create! valid_attributes
#         patch transcript_config_url(transcript_config), params: { transcript_config: new_attributes }
#         transcript_config.reload
#         skip('Add assertions for updated state')
#       end
#
#       it 'redirects to the transcript_config' do
#         transcript_config = TranscriptConfig.create! valid_attributes
#         patch transcript_config_url(transcript_config), params: { transcript_config: new_attributes }
#         transcript_config.reload
#         expect(response).to redirect_to(transcript_config_url(transcript_config))
#       end
#     end
#
#     context 'with invalid parameters' do
#       it "renders a successful response (i.e. to display the 'edit' template)" do
#         transcript_config = TranscriptConfig.create! valid_attributes
#         patch transcript_config_url(transcript_config), params: { transcript_config: invalid_attributes }
#         expect(response).to be_successful
#       end
#     end
#   end
#
#   describe 'DELETE /destroy' do
#     it 'destroys the requested transcript_config' do
#       transcript_config = TranscriptConfig.create! valid_attributes
#       expect do
#         delete transcript_config_url(transcript_config)
#       end.to change(TranscriptConfig, :count).by(-1)
#     end
#
#     it 'redirects to the transcript_configs list' do
#       transcript_config = TranscriptConfig.create! valid_attributes
#       delete transcript_config_url(transcript_config)
#       expect(response).to redirect_to(transcript_configs_url)
#     end
#   end
# end
